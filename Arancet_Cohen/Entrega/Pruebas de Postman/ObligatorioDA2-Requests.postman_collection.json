{
	"info": {
		"_postman_id": "3edb044b-e71f-4dd8-8cd1-19356042d076",
		"name": "ObligatorioDA2-Requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ResetDatabase",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/test",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogInWrongPassword",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "100a0e0f-e706-405d-8ffb-a963257177e6",
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"admin\",\n\t\"password\":\"adm\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/authentication",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginNotAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b73a6425-d216-43b6-ba30-551512f5ef01",
						"exec": [
							"var jsonResponse = JSON.parse(responseBody);",
							"pm.globals.set(\"Token\",jsonResponse.token);",
							"console.log(jsonResponse);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"username\",\n\t\"password\":\"password\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/authentication",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddUserWithNoPermission",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 403\",function(){",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"John\",\n\"surname\": \"Doe\",\n\"username\": \"Bentos\",\n\"password\": \"aPassword\",\n\"email\": \"John@Doe.com\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "Login admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9cf794f-43f7-4d7f-ae20-dc8652e44568",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"var jsonResponse = JSON.parse(responseBody);",
							"pm.globals.set(\"Token\",jsonResponse.token);",
							"console.log(jsonResponse);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"admin\",\n\t\"password\":\"admin\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/authentication",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"authentication"
					]
				},
				"description": "Logs into the app"
			},
			"response": []
		},
		{
			"name": "AddFollowerUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData).to.have.property('name');",
							"  pm.expect(jsonData).to.have.property('surname');",
							"  pm.expect(jsonData).to.have.property('username');",
							"  pm.expect(jsonData).to.have.property('email');",
							"  pm.expect(jsonData).to.have.property('isAdmin');",
							"  pm.expect(jsonData.isAdmin).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"John\",\n\"surname\": \"Doe\",\n\"username\": \"Bentos\",\n\"password\": \"aPassword\",\n\"email\": \"John@Doe.com\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "Add Null  Field User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"John\",\n\"surname\": \"Doe\",\n\"username\": \"Bentos\",\n\"email\": \"John@Doe.com\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "Add Invalid Email User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"John\",\n\"surname\": \"Doe\",\n\"username\": \"Bentos\",\n\"password\": \"aPassword\",\n\"email\": \" \"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "AddSameUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"John\",\n\"surname\": \"Doe\",\n\"username\": \"Bentos\",\n\"password\": \"aPassword\",\n\"email\": \"John@Doe.com\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "Add Admin User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e6de780-49f0-4cff-af95-87718c739017",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData).to.have.property('name');",
							"  pm.expect(jsonData).to.have.property('surname');",
							"  pm.expect(jsonData).to.have.property('username');",
							"  pm.expect(jsonData).to.have.property('email');",
							"  pm.expect(jsonData).to.have.property('isAdmin');",
							"  pm.expect(jsonData.isAdmin).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"Mike\",\n\"surname\": \"Ness\",\n\"username\": \"MikeNessSD\",\n\"password\": \"password\",\n\"email\": \"MikeNess@SocialDistortion.com\",\n\"isadmin\": true\n}"
				},
				"url": {
					"raw": "{{Domain}}api/users",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"users"
					]
				},
				"description": "adds a user to the application"
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e1b1e5b0-0ace-4ffc-932d-db932b87e108",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 4 users\",function(){",
							"    pm.expect(jsonData.length).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users with no authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec7afeae-ec78-4a7b-9ce0-7802762bafa5",
						"exec": [
							"pm.test(\"Status code is 401\",function(){",
							"    pm.response.to.have.status(401);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b9943d-6aca-4186-96f6-9b02a65dade6",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData).to.have.property('name');",
							"  pm.expect(jsonData).to.have.property('surname');",
							"  pm.expect(jsonData).to.have.property('username');",
							"  pm.expect(jsonData).to.have.property('email');",
							"  pm.expect(jsonData).to.have.property('isAdmin');",
							"  pm.expect(jsonData.isAdmin).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/username/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"username",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ModifyUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d952670-f518-4f4f-9b60-0798924dfbdc",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData.name).to.eql('newName');",
							"  pm.expect(jsonData.surname).to.eql('newSurname');",
							"  pm.expect(jsonData.username).to.eql('username');",
							"  pm.expect(jsonData.email).to.eql('anEmail@hotmail.com');",
							"  pm.expect(jsonData.isAdmin).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"newName\",\n\"surname\": \"newSurname\",\n\"username\": \"username\",\n\"password\": \"password\",\n\"email\": \"anEmail@hotmail.com\",\n\"isadmin\":false\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/users/username",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"username"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put not existent user adds it",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d952670-f518-4f4f-9b60-0798924dfbdc",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData.username).to.eql('notExistent');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"newName\",\n\"surname\": \"newSurname\",\n\"username\": \"notExistent\",\n\"password\": \"password\",\n\"email\": \"anEmail@hotmail.com\",\n\"isadmin\":true\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/users/notExistent",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"notExistent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete existent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1d1b956-f2a1-4586-8b42-b24154f4af53",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has ok message message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The user has been deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/MikeNessSD",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"MikeNessSD"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get deleted user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79b9943d-6aca-4186-96f6-9b02a65dade6",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/MikeNessSD/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"MikeNessSD",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete not existent user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1d1b956-f2a1-4586-8b42-b24154f4af53",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('User not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/MikeNessSD",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"MikeNessSD"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete no permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1d1b956-f2a1-4586-8b42-b24154f4af53",
						"exec": [
							"/*pm.test(\"Status code is 403\",function(){",
							"    pm.response.to.have.status(403);",
							"});*/",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "48c93715-d834-4119-81b2-f2d92d03eb8f",
						"exec": [
							"pm.sendRequest(\"LoginNotAdmin\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/Bentos",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"Bentos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add more than two teams sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8987a597-a08c-416e-80cc-25880a2d5e41",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has sport data\",function(){",
							"  pm.expect(jsonData.name).to.eql('formula1');",
							"  pm.expect(jsonData.isTwoTeams).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"formula1\",\n\"istwoteams\": false\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports"
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Add same sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7783d85b-d00a-453c-9f44-e38501fa9285",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport already exists');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"formula1\",\n\"istwoteams\": false\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						""
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Add two teams sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8987a597-a08c-416e-80cc-25880a2d5e41",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has sport data\",function(){",
							"  pm.expect(jsonData.name).to.eql('football');",
							"  pm.expect(jsonData.isTwoTeams).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"football\",\n\"istwoteams\": true\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports"
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Get sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a367629-47f5-4050-bacd-106683a9b62c",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/football",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8a367629-47f5-4050-bacd-106683a9b62c",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/basketball",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"basketball"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all sports",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15fb6ea7-efb7-4bfd-a1e8-f542ac656a79",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 sports\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add sport no permissions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2315f985-5ffc-43b9-8e59-c38fbaa0a04a",
						"exec": [
							"/*pm.test(\"Status code is 403\",function(){",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"archery\",\n\"istwoteams\": false\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						""
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Add sport to delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8987a597-a08c-416e-80cc-25880a2d5e41",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"basketball\",\n\"istwoteams\": true\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports"
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Delete sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "61320830-c250-43cc-b817-a884a6dc1035",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The sport has been deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/basketball",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"basketball"
					]
				},
				"description": "deletes sport"
			},
			"response": []
		},
		{
			"name": "Add deleted sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8987a597-a08c-416e-80cc-25880a2d5e41",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"basketball\",\n\"istwoteams\": true\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports"
					]
				},
				"description": "Adds a sport "
			},
			"response": []
		},
		{
			"name": "Delete not existent sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c2736f2-d8e5-4c68-83d1-f35cfa14969c",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/rugby",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"rugby"
					]
				},
				"description": "deletes sport"
			},
			"response": []
		},
		{
			"name": "Add team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.name).to.eql('progreso');",
							"  pm.expect(jsonData.photo).to.eql('foto');",
							"  pm.expect(jsonData.id).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"progreso\",\n\t\"sportname\":\"football\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add same team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Team already exists');",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ec62486c-795f-4992-8c9f-4b18e465c69d",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"progreso\",\n\t\"sportname\":\"football\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add another team same sport 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.name).to.eql('nacional');",
							"  pm.expect(jsonData.photo).to.eql('foto');",
							"  pm.expect(jsonData.id).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"nacional\",\n\t\"sportname\":\"football\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add another team same sport 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"defensor\",\n\t\"sportname\":\"football\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add team of no existent sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"cuervos\",\n\t\"sportname\":\"rugby\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Modify team data fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23dfdd29-9bbd-4254-9b4b-a53a37a6941b",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has team data\",function(){",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.name).to.eql('torque');",
							"  pm.expect(jsonData.photo).to.eql('anotherPhoto');",
							"  pm.expect(jsonData.id).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"sportname\":\"football\",\n\t\"name\":\"torque\",\n\t\"photo\":\"anotherPhoto\"\n\t\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify team sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23dfdd29-9bbd-4254-9b4b-a53a37a6941b",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has team data\",function(){",
							"  //pm.expect(jsonData.sportName).to.eql('football');",
							"  //pm.expect(jsonData.name).to.eql('torque');",
							"  pm.expect(jsonData.photo).to.eql('anotherPhoto');",
							"  pm.expect(jsonData.id).to.eql(2);",
							"});",
							"",
							"console.log(jsonData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\n\t\"sportname\":\"basketball\",\n\t\"name\":\"torque\",\n\t\"photo\":\"anotherPhoto\"\n\t\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add team to delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"wanderers\",\n\t\"sportname\":\"football\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Delete team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0eaeeaae-2adb-4bbe-b9a3-c212a65e7a93",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The team was deleted succesfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/teams/4",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"4"
					]
				},
				"description": "Deletes a team"
			},
			"response": []
		},
		{
			"name": "Delete not existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0eaeeaae-2adb-4bbe-b9a3-c212a65e7a93",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Team not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/teams/8",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"8"
					]
				},
				"description": "Deletes a team"
			},
			"response": []
		},
		{
			"name": "CreateOneMatchFixture",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"fixturename\": \"OneMatchFixture\",\n \"day\":10,\n \"month\":10,\n \"year\":2018\n \n}"
				},
				"url": {
					"raw": "{{Domain}}/api/sports/rugby/OneMatchFixture",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"rugby",
						"OneMatchFixture"
					]
				},
				"description": "creates fixture of a sport"
			},
			"response": []
		},
		{
			"name": "Get existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66bf60c9-0c34-4576-a248-069b8e3dca60",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData).to.have.property('sportName');",
							"  pm.expect(jsonData).to.have.property('name');",
							"  pm.expect(jsonData).to.have.property('photo');",
							"    pm.expect(jsonData).to.have.property('id');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "66bf60c9-0c34-4576-a248-069b8e3dca60",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Team not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/teams/5",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add racing team 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"mercedes\",\n\t\"sportname\":\"formula1\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add racing team 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"ferrari\",\n\t\"sportname\":\"formula1\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Add racing team 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c54d4fc-4797-4d2f-b99f-a189788ce6ab",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\":\"red bull\",\n\t\"sportname\":\"formula1\",\n\t\"photo\": \"foto\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				},
				"description": "Adds a new team"
			},
			"response": []
		},
		{
			"name": "Get all teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "27bb6ade-25bc-4032-9520-e2f11f6fecb7",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 5 teams\",function(){",
							"    pm.expect(jsonData.length).to.eql(6);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/teams/",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add two teams match 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(1);",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.hasWinner).to.eql(false);",
							"  pm.expect(jsonData.winnerId).to.eql(0);",
							"  pm.expect(teamList.length).to.eql(2);",
							"  pm.expect(teamList).to.includes(1);",
							"  pm.expect(teamList).to.includes(2);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,2],\n\"date\":\"11/22/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add two teams match with not existing team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Team 15 not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,15],\n\"date\":\"11/22/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add three teams competition",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(2);",
							"  pm.expect(jsonData.sportName).to.eql('formula1');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.team_Position).to.eql(null);",
							"  pm.expect(teamList.length).to.eql(3);",
							"  pm.expect(teamList).to.includes(5);",
							"  pm.expect(teamList).to.includes(6);",
							"  pm.expect(teamList).to.includes(7);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"formula1\",\n\"teamids\":[5,6,7],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add three teams competition with not existing team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Team 12 not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"formula1\",\n\"teamids\":[5,12,6],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add encounter of no existing sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"rugby\",\n\"teamids\":[1,2],\n\"date\":\"11/22/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add match with a team having another match on that date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.include(\"nacional already has a match on date 22/11/2018\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[2,3],\n\"date\":\"11/22/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add same match but in an unoccupied date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(3);",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.hasWinner).to.eql(false);",
							"  pm.expect(jsonData.winnerId).to.eql(0);",
							"  pm.expect(teamList.length).to.eql(2);",
							"  //pm.expect(teamList.length).to.includes(1);",
							"  //pm.expect(teamList.length).to.includes(2);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[2,3],\n\"date\":\"11/23/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add competition with repeated teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql(\"A match can't have repeated teams\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"formula1\",\n\"teamids\":[5,5,6],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add competition with different sport teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql(\"The teams must play the specified sport\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"formula1\",\n\"teamids\":[1,5,6],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add match with less than two teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql(\"A match can't have less than 2 teams\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add match with more than two teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4420866b-95e1-48a9-9cfa-58025114e366",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql(\"The sport does not allow more than two teams\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,2,3],\n\"date\":\"12/25/2019\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all encounters",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd764b58-40c6-46fb-9167-428f51c34d7c",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 encounters\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all encounters Calendar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd764b58-40c6-46fb-9167-428f51c34d7c",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"console.log(jsonData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches?grouped=true",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches"
					],
					"query": [
						{
							"key": "grouped",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existent match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7798b2c9-ab38-43b2-a6e0-580824dcbefe",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(2);",
							"  pm.expect(jsonData.sportName).to.eql('formula1');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.team_Position).to.eql(null);",
							"  pm.expect(teamList.length).to.eql(3);",
							"  pm.expect(teamList).to.includes(5);",
							"  pm.expect(teamList).to.includes(6);",
							"  pm.expect(teamList).to.includes(7);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7798b2c9-ab38-43b2-a6e0-580824dcbefe",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Match not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/9",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddb61f0a-bc2b-4bb2-a050-64a3d54670fa",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has ok message message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The match was deleted successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/3",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete not existent match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddb61f0a-bc2b-4bb2-a050-64a3d54670fa",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Match not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/9",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add two teams match 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180d6571-5439-4c6b-b28d-2f0e8bb6d21b",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,3],\n\"date\":\"11/25/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify match date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7597dec-6086-4636-a043-b39df6628d31",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(1);",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.hasWinner).to.eql(false);",
							"  pm.expect(jsonData.date).to.eql('2018-11-22T00:00:00');",
							"  pm.expect(jsonData.winnerId).to.eql(0);",
							"  pm.expect(teamList.length).to.eql(2);",
							"  pm.expect(teamList).to.includes(1);",
							"  pm.expect(teamList).to.includes(2);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,2],\n\"date\":\"11/22/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify match date to occupied date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7597dec-6086-4636-a043-b39df6628d31",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.include('progreso already has a match on date 25/11/2018');",
							"});",
							"console.log(jsonData.errorMessage);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,2],\n\"date\":\"11/25/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify match teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b0d60f05-0534-499b-85f7-6dba92fa1153",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(1);",
							"  pm.expect(jsonData.sportName).to.eql('football');",
							"  pm.expect(jsonData.hasResult).to.eql(false);",
							"  pm.expect(jsonData.hasWinner).to.eql(false);",
							"  pm.expect(jsonData.winnerId).to.eql(0);",
							"  pm.expect(teamList.length).to.eql(2);",
							"  pm.expect(teamList).to.includes(1);",
							"  pm.expect(teamList).to.includes(3);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"sportname\":\"football\",\n\"teamids\":[1,3],\n\"date\":\"11/18/2018\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow team 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc2fbbb4-8e8b-4b3a-935c-fc7a9e2f1a0a",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('You now follow the team');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow team 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc2fbbb4-8e8b-4b3a-935c-fc7a9e2f1a0a",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('You now follow the team');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/5",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow not existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc2fbbb4-8e8b-4b3a-935c-fc7a9e2f1a0a",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Team not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/9",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Follow already following team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc2fbbb4-8e8b-4b3a-935c-fc7a9e2f1a0a",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('User already follows team');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get followed teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9b19ad6d-30df-47f8-a709-d36fa9a623dc",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 teams\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/admin/followed-teams",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"admin",
						"followed-teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unfollow followed team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "827293a9-bfe2-4b10-8a51-e6f59fef4e8b",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has ok message\",function(){",
							"    pm.expect(jsonData.okMessage).to.eql(\"Team unfollowed succesfully\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unfollow not followed team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "827293a9-bfe2-4b10-8a51-e6f59fef4e8b",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"You don't follow this team\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/2",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unfollow not existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "827293a9-bfe2-4b10-8a51-e6f59fef4e8b",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"Team not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/9",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment on existent match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "394475da-ac79-4c6e-851d-5d5cce73755c",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has user data\",function(){",
							"  pm.expect(jsonData.id).to.eql(1);",
							"  pm.expect(jsonData.text).to.eql('Estuvo arreglado');",
							"  pm.expect(jsonData.makerUsername).to.eql('admin');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"text\":\"Estuvo arreglado\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment on another match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "394475da-ac79-4c6e-851d-5d5cce73755c",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"text\":\"Gran partido\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment on existent match invalid format",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "394475da-ac79-4c6e-851d-5d5cce73755c",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has bad format\",function(){",
							"  pm.expect(jsonData.Text[0]).to.eql('The Text field is required.');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"text\":\"\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Comment on no existent match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "394475da-ac79-4c6e-851d-5d5cce73755c",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData.errorMessage).to.eql('Match not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"text\":\"Estuvo arreglado\"\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/15/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"15",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existent match comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23f4e144-a669-4815-8c29-2e5aca42524a",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 sports\",function(){",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(jsonData[0].id).to.eql(1);",
							"    pm.expect(jsonData[0].makerUsername).to.eql(\"admin\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent match comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26809ff3-18c5-4c2a-afe7-a4bd999a5638",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Match not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/15/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"15",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get existent comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cfe87fb-e5aa-4c69-9ee2-0054cd96297d",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var teamList = jsonData.teamsIds;",
							"",
							"pm.test(\"Has match data\",function(){",
							"  pm.expect(jsonData.id).to.eql(1);",
							"  pm.expect(jsonData.text).to.eql('Estuvo arreglado');",
							"  pm.expect(jsonData.makerUsername).to.eql(\"admin\");",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/comments/1",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cfe87fb-e5aa-4c69-9ee2-0054cd96297d",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql(\"Couldn't find comment\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/comments/15",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"comments",
						"15"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98c931a5-1cca-43dd-9042-88faa0c9002b",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 sports\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"comments"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get encounters by sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81a10611-6f11-4d50-8399-b4c995092dae",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 sports\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/sport/football",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"sport",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get matches of no existent sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "81a10611-6f11-4d50-8399-b4c995092dae",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql(\"Sport not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/sport/rugby",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"sport",
						"rugby"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get encounters by team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49f88f2a-54df-4d19-aca3-859b9064ea08",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 matches\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/team/1",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"team",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get encounters of no existent team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49f88f2a-54df-4d19-aca3-859b9064ea08",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Team not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/team/15",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"team",
						"15"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get sport teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af685a9e-8b99-47cf-b1ec-3f2453dcce6d",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 teams\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/football/teams",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"football",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get teams of not existing sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af685a9e-8b99-47cf-b1ec-3f2453dcce6d",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/rugby/teams",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"rugby",
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get sport table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5638df32-3618-44fd-a255-a8af6c649d0e",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 standings\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/sports/football/table",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"sports",
						"football",
						"table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get not existent sport table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "72be4e2b-33ed-472e-aa2f-1f0919d92d9b",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql('Sport not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/sports/rugby/table",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"sports",
						"rugby",
						"table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get fixture algorithms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4da83926-9c60-4619-af07-9cc4720c2d11",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 2 algorithms\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/fixtures",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"fixtures"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate one match fixture",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41b4d182-70b4-49c7-8438-2e5570c74fd2",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 matches\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"initialDate\": \"2018/12/26\",\n\"fixtureName\":\"ObligatorioDA2.BusinessLogic.FixtureAlgorithms.OneMatchFixture\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/fixtures/football",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"fixtures",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify fixture encounters were added",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd764b58-40c6-46fb-9167-428f51c34d7c",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 6 sports\",function(){",
							"    pm.expect(jsonData.length).to.eql(6);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate fixture not existing sport",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41b4d182-70b4-49c7-8438-2e5570c74fd2",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql(\"Sport not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"initialDate\": \"2018/12/26\",\n\"fixtureName\":\"ObligatorioDA2.BusinessLogic.FixtureAlgorithms.OneMatchFixture\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/fixtures/rugby",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"fixtures",
						"rugby"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate fixture with no existing algorithm",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41b4d182-70b4-49c7-8438-2e5570c74fd2",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message message\",function(){",
							"  pm.expect(jsonData).to.have.property('errorMessage');",
							"  pm.expect(jsonData.errorMessage).to.eql(\"Fixture not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"initialDate\": \"2018/12/26\",\n\"fixtureName\":\"algorithm\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/fixtures/football",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"fixtures",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate home away fixture",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "41b4d182-70b4-49c7-8438-2e5570c74fd2",
						"exec": [
							"pm.test(\"Status code is 201\",function(){",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 6 matches\",function(){",
							"    pm.expect(jsonData.length).to.eql(6);",
							"});",
							"",
							"console.log(jsonData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"initialDate\": \"2019/02/01\",\n\"fixtureName\":\"ObligatorioDA2.BusinessLogic.FixtureAlgorithms.HomeAwayFixture\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/fixtures/football",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"fixtures",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set match result with winner",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d0330ffb-aaf8-4f42-92af-08752907d2c7",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned match with the result\",function(){",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.sportName).to.eql('football');",
							"    pm.expect(jsonData.teamsIds.length).to.eql(2);",
							"    pm.expect(jsonData.hasResult).to.eql(true);",
							"    pm.expect(jsonData.hasWinner).to.eql(true);",
							"    pm.expect(jsonData.winnerId).to.eql(1);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":3,\"position\":2}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set tied match result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned match with the result\",function(){",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.sportName).to.eql('football');",
							"    pm.expect(jsonData.teamsIds.length).to.eql(2);",
							"    pm.expect(jsonData.hasResult).to.eql(true);",
							"    pm.expect(jsonData.hasWinner).to.eql(false);",
							"    pm.expect(jsonData.winnerId).to.eql(0);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":3,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set not existent match result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"Match not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":3,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/15/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"15",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set result with teams outside the match",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"The result must contain all the encounter, teams and only them\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":5,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set result with not existing teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"Team not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":18,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set result with missing positions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"The result must contain all the encounter, teams and only them\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set result with more positions than teams",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "967e44b1-18d4-4009-b800-03ba26af2878",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"The result must contain all the encounter, teams and only them\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":1,\"position\":1},{\"teamId\":3,\"position\":1}, {\"teamId\":5,\"position\":1}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/1/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"1",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set competition result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf1a0a2-d814-4f3a-b7e8-615238917488",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned match with the result\",function(){",
							"    pm.expect(jsonData.id).to.eql(2);",
							"    pm.expect(jsonData.sportName).to.eql('formula1');",
							"    pm.expect(jsonData.teamsIds.length).to.eql(3);",
							"    pm.expect(jsonData.hasResult).to.eql(true);",
							"    pm.expect(jsonData.team_Position.length).to.eql(3);",
							"    pm.expect(jsonData.team_Position[0].teamId).to.eql(5);",
							"    pm.expect(jsonData.team_Position[0].points).to.eql(1);",
							"    pm.expect(jsonData.team_Position[1].teamId).to.eql(7);",
							"    pm.expect(jsonData.team_Position[1].points).to.eql(2);",
							"    pm.expect(jsonData.team_Position[2].teamId).to.eql(6);",
							"    pm.expect(jsonData.team_Position[2].points).to.eql(3);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":5,\"position\":1},{\"teamId\":6,\"position\":3},{\"teamId\":7,\"position\":2}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set not existent competition result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf1a0a2-d814-4f3a-b7e8-615238917488",
						"exec": [
							"pm.test(\"Status code is 404\",function(){",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"Match not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":5,\"position\":1},{\"teamId\":6,\"position\":3},{\"teamId\":7,\"position\":2}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/15/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"15",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set competition with repeated positions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf1a0a2-d814-4f3a-b7e8-615238917488",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"A result can't have repeated positions\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":5,\"position\":1},{\"teamId\":6,\"position\":2},{\"teamId\":7,\"position\":2}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set competition with invalid positions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf1a0a2-d814-4f3a-b7e8-615238917488",
						"exec": [
							"pm.test(\"Status code is 400\",function(){",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"    pm.expect(jsonData.errorMessage).to.eql(\"The result can't have gap positions\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":5,\"position\":2},{\"teamId\":6,\"position\":5},{\"teamId\":7,\"position\":8}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "View football table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f73e8b59-4c5d-4964-8e17-b341c0ff894f",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 positions\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"    pm.expect(jsonData[0].teamId).to.eql(1);",
							"    pm.expect(jsonData[0].points).to.eql(1);",
							"    pm.expect(jsonData[1].teamId).to.eql(3);",
							"    pm.expect(jsonData[1].points).to.eql(1);",
							"    pm.expect(jsonData[2].teamId).to.eql(2);",
							"    pm.expect(jsonData[2].points).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/sports/football/table",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"sports",
						"football",
						"table"
					]
				}
			},
			"response": []
		},
		{
			"name": "View formula 1 table",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec0b0c5b-5358-46e1-9c57-ebd87597d41e",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 3 positions\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"    pm.expect(jsonData[0].teamId).to.eql(5);",
							"    pm.expect(jsonData[0].points).to.eql(3);",
							"    pm.expect(jsonData[1].teamId).to.eql(7);",
							"    pm.expect(jsonData[1].points).to.eql(2);",
							"    pm.expect(jsonData[2].teamId).to.eql(6);",
							"    pm.expect(jsonData[2].points).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/sports/formula1/table",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"sports",
						"formula1",
						"table"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change competition result",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddf1a0a2-d814-4f3a-b7e8-615238917488",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned match with the result\",function(){",
							"    pm.expect(jsonData.id).to.eql(2);",
							"    pm.expect(jsonData.sportName).to.eql('formula1');",
							"    pm.expect(jsonData.teamsIds.length).to.eql(3);",
							"    pm.expect(jsonData.hasResult).to.eql(true);",
							"    pm.expect(jsonData.team_Position.length).to.eql(3);",
							"    pm.expect(jsonData.team_Position[0].teamId).to.eql(6);",
							"    pm.expect(jsonData.team_Position[0].points).to.eql(1);",
							"    pm.expect(jsonData.team_Position[1].teamId).to.eql(7);",
							"    pm.expect(jsonData.team_Position[1].points).to.eql(2);",
							"    pm.expect(jsonData.team_Position[2].teamId).to.eql(5);",
							"    pm.expect(jsonData.team_Position[2].points).to.eql(3);",
							"",
							"});",
							"",
							"console.log(jsonData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"team_position\": [{\"teamId\":5,\"position\":3},{\"teamId\":6,\"position\":1},{\"teamId\":7,\"position\":2}]\n}"
				},
				"url": {
					"raw": "{{Domain}}/api/matches/2/result",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"2",
						"result"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify logs",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa5d169f-1ba2-4a3c-85b9-46f3419965a9",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 9 logs\",function(){",
							"    pm.expect(jsonData.length).to.eql(9);",
							"});",
							"",
							"console.log(jsonData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/logs",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"logs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get logs until date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa5d169f-1ba2-4a3c-85b9-46f3419965a9",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 5 logs\",function(){",
							"    var top = new Date('2005-07-26').getTime();",
							"    var responseDate = new Date(Date.parse(jsonData[0].date)).getTime()",
							"    pm.expect(jsonData.length).to.eql(1);",
							"    pm.expect(top).to.be.above(responseDate);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/logs?to=2001/09/11",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"logs"
					],
					"query": [
						{
							"key": "to",
							"value": "2001/09/11"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify from date",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa5d169f-1ba2-4a3c-85b9-46f3419965a9",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 6 logs\",function(){",
							"    pm.expect(jsonData.length).to.eql(6);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/logs?from=2018/01/01",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"logs"
					],
					"query": [
						{
							"key": "from",
							"value": "2018/01/01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify logs between dates",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa5d169f-1ba2-4a3c-85b9-46f3419965a9",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 5 logs\",function(){",
							"    pm.expect(jsonData.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/logs?from=2002/01/01&to=2018/01/01",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"logs"
					],
					"query": [
						{
							"key": "from",
							"value": "2002/01/01"
						},
						{
							"key": "to",
							"value": "2018/01/01"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete sport cascade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1a57296-4d38-4879-93d9-86376de25cf4",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has ok message message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The sport has been deleted successfully');",
							"});",
							"console.log(jsonData.okMessage);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/sports/football",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"sports",
						"football"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check football teams were deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2e6375c0-77be-4f1d-a6f5-f0112055e4b1",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"returned 5 teams\",function(){",
							"    pm.expect(jsonData.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}api/teams",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check football encounters were deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7fb5ee6e-f8d8-4933-8cc2-fa4b225da7a1",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"only race left\",function(){",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check football matches' comments were deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6cbbc1b4-8489-41b6-820e-d5f818cd2b3a",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"only comment on race left\",function(){",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/comments",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check no football teams are followed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cda95e7-4f23-488c-adb3-f51312f17127",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"football teams not followed\",function(){",
							"    pm.expect(jsonData.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/admin/followed-teams",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"admin",
						"followed-teams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user to be deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b73a6425-d216-43b6-ba30-551512f5ef01",
						"exec": [
							"var jsonResponse = JSON.parse(responseBody);",
							"pm.globals.set(\"Token\",jsonResponse.token);",
							"console.log(jsonResponse);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"notExistent\",\n\t\"password\":\"password\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/authentication",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"authentication"
					]
				}
			},
			"response": []
		},
		{
			"name": "User to be deleted follows team",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cda95e7-4f23-488c-adb3-f51312f17127",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/followed-teams/5",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"followed-teams",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1d1b956-f2a1-4586-8b42-b24154f4af53",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/notExistent",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"notExistent"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login admin again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9cf794f-43f7-4d7f-ae20-dc8652e44568",
						"exec": [
							"",
							"var jsonResponse = JSON.parse(responseBody);",
							"pm.globals.set(\"Token\",jsonResponse.token);",
							"console.log(jsonResponse);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"admin\",\n\t\"password\":\"admin\"\n}"
				},
				"url": {
					"raw": "{{Domain}}api/authentication",
					"host": [
						"{{Domain}}api"
					],
					"path": [
						"authentication"
					]
				},
				"description": "Logs into the app"
			},
			"response": []
		},
		{
			"name": "Delete team cascade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0eaeeaae-2adb-4bbe-b9a3-c212a65e7a93",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Has error message\",function(){",
							"  pm.expect(jsonData).to.have.property('okMessage');",
							"  pm.expect(jsonData.okMessage).to.eql('The team was deleted succesfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/teams/5",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"teams",
						"5"
					]
				},
				"description": "Deletes a team"
			},
			"response": []
		},
		{
			"name": "Check race was deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6cbbc1b4-8489-41b6-820e-d5f818cd2b3a",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"only comment on race left\",function(){",
							"    pm.expect(jsonData.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/matches/",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"matches",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Check no racing teams are followed",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cda95e7-4f23-488c-adb3-f51312f17127",
						"exec": [
							"pm.test(\"Status code is 200\",function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"football teams not followed\",function(){",
							"    pm.expect(jsonData.length).to.eql(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "Bearer {{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{Domain}}/api/users/admin/followed-teams",
					"host": [
						"{{Domain}}"
					],
					"path": [
						"api",
						"users",
						"admin",
						"followed-teams"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "43e5570f-cb2d-426c-a209-cf754caf3719",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "93e580d9-b107-486d-8b74-7d31c3f1dfc9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f79e52e4-bccd-4821-bb1e-87e1e0845716",
			"key": "Domain",
			"value": "https://localhost:44328/",
			"type": "string"
		},
		{
			"id": "5e64cd06-524c-4843-8aa0-b0064887b955",
			"key": "Token\n",
			"value": "",
			"type": "string"
		}
	]
}